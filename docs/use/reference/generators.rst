.. _use_ref_generators:

Generators
===========

.. currentmodule:: topos.core.generators

Generators are simply functions that can be use to produce certain geometric
data that can then be used as a starting point to build from. For example most
of the primitives use some combination of these functions behind the scenes.

Currently the only types of data we have generators for are vertex and face data
under the following geometries

- :ref:`use_ref_generators_planar`
- :ref:`use_ref_generators_cylindrical`

.. note::

   These functions simply generate the raw data representing these geometries
   and the results are numpy arrays. If you wish to use the :code:`VertexArray`
   and :code:`FaceArray` objects you need to pass the results of these functions
   to the relevant constructors.

.. _use_ref_generators_planar:

Planar Geometry
===============

Perhaps the simplest setup, a flat plane comprised of a grid of vertices at a
given resolution. This grid can be shifted around in the :math:`xy`-plane but
the orientation is currently fixed.

To generate the vertices for a flat plane the :py:func:`planar_vertices`
function can be used. By default the plane is generated in the domain
:math:`[0, 1] \times [0, 1]`.

.. doctest:: ref-generators-planar

    >>> from topos.core.generators import planar_vertices
    >>> planar_vertices(3)
    array([[0. , 0. , 0. ],
           [0.5, 0. , 0. ],
           [1. , 0. , 0. ],
           [0. , 0.5, 0. ],
           [0.5, 0.5, 0. ],
           [1. , 0.5, 0. ],
           [0. , 1. , 0. ],
           [0.5, 1. , 0. ],
           [1. , 1. , 0. ]])

Here the argument :code:`3` tells the function that we want it to generate a
:math:`3 \times 3` grid of vertices.

.. doctest:: ref-generators-planar

    >>> _.shape
    (9, 3)

.. note::

   **Top Tip**: The underscore :code:`_` is a special variable in the Python
   :term:`REPL` that always points to the result of the previous step.

You can however adjust the domain in which the plane is generated by making use
of the :code:`xmin`, :code:`xmax`, :code:`ymin` and :code:`ymax` arguments, for
example we can generate the plane in the domain :math:`[-1, 1] \times [-1, 1]`

.. doctest:: ref-generators-planar

    >>> planar_vertices(3, xmin=-1, ymin=-1)
    array([[-1., -1.,  0.],
           [ 0., -1.,  0.],
           [ 1., -1.,  0.],
           [-1.,  0.,  0.],
           [ 0.,  0.,  0.],
           [ 1.,  0.,  0.],
           [-1.,  1.,  0.],
           [ 0.,  1.,  0.],
           [ 1.,  1.,  0.]])

To generate the data for the faces in the plane we use the
:py:func:`planar_faces` function. Since face definitions aren't affected by
where the plane is in space the use of this function is very simple. Simply pass
it the same number as you used in the :py:func:`planar_vertices` function to
generate the faces for a grid containing the same number of vertices.

.. doctest:: ref-generators-planar

    >>> from topos.core.generators import planar_faces
    >>> planar_faces(3)
    array([[1, 2, 5, 4],
           [2, 3, 6, 5],
           [4, 5, 8, 7],
           [5, 6, 9, 8]])

.. _use_ref_generators_cylindrical:

Cylindrical Geometry
====================

This makes use of the :term:`cylindrical coordinate` system to generate vertex
and face data to describe a hollow cylinder. By default the cylinder has radius
1 and the :math:`z`-values occupy the domain :math:`[0, 1]`.

The vertices can be generated using the :py:func:`cylindrical_vertices`
function, its simplest use involves passing in just two numbers, how many
vertices you want included in the angular and height directions.

.. doctest:: ref-generators-cylindrical

    >>> from topos.core.generators import cylindrical_vertices
    >>> cylindrical_vertices(3, 2)
    array([[0.       , 0.       , 1.       ],
           [2.0943951, 0.       , 1.       ],
           [4.1887902, 0.       , 1.       ],
           [0.       , 1.       , 1.       ],
           [2.0943951, 1.       , 1.       ],
           [4.1887902, 1.       , 1.       ]])

Here we have generated a triangular cylinder with 3 vertices around the
circumference and 2 vertices to define the top and bottom of the cylinder.

.. note::

    You may have noticed that the coordinates have been generated in a
    non-standard order :math:`(\theta, z, r)`. This is so that the resulting
    grid of vertices looks similar to a plane of vertices and makes generating
    the face data easier.

    Most of the time you shouldn't have to worry about this as other objects in
    :code:`topos` such as the :code:`VertexArray` objects are written to
    automatically deal with this but it is something to keep in mind when
    working at this level.

You can alter the vertical space in which the cylinder exists by altering the
:code:`zmin` and :code:`zmax` arguments. The :code:`theta_min` and
:code:`theta_max` arguments can also be used to adjust the angles at which the
cylinder exists. So for example we can generate a half cylinder that starts at
:math:`z = -1` and ends at :math:`z = 1` as follows

.. doctest:: ref-generators-cylindrical

    >>> from math import pi
    >>> cylindrical_vertices(3, 2, zmin=-1, zmax=1, theta_min=0, theta_max=pi)
    array([[ 0.        , -1.        ,  1.        ],
           [ 1.57079633, -1.        ,  1.        ],
           [ 3.14159265, -1.        ,  1.        ],
           [ 0.        ,  1.        ,  1.        ],
           [ 1.57079633,  1.        ,  1.        ],
           [ 3.14159265,  1.        ,  1.        ]])

The :py:func:`cylindrical_faces` function is used to generate the face data and
simply takes the number of vertices in the :math:`\theta` and :math:`z` directions
respectively

.. doctest:: ref-generators-cylindrical

    >>> from topos.core.generators import cylindrical_faces
    >>> cylindrical_faces(3, 2)
    array([[1, 2, 5, 4],
           [2, 1, 4, 5],
           [3, 2, 5, 6]])
