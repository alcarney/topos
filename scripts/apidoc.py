"""This basically does what the sphinx-apidoc command does
but we have more control over the output
"""
import sys
from datetime import datetime
from string import Template
from os import getcwd, walk, path, mkdir


module_template = """
.. File autogenerated on $date by script/apidoc.py
   DO NOT MODIFY THIS FILE as it will be overwritten next time the script is run 

$title

.. automodule:: $module
"""


index_template = """
.. File autogenerated on $date by script/apidoc.py
   DO NOT MODIFY THIS FILE as it will be overwritten next time the script is run 
   
$title

.. toctree::
    :maxdepth: 1
    
$items
"""


def make_title(name):
    """ Given a string, turn it into an reStructuredText title.

    :param str name: The string to be the title
    :rtype: str
    :return: The title string
    """
    title = name.capitalize()
    title += "\n" + "="*len(name)
    return title


def document_module(config, dirname, pyfile):
    """Given a python module, write the autodoc declarations for it

    :param config: Config that contains the relevant filepath info
    :param dirname: Path of the current directory relative to the root
    :param pyfile: Name of the python module to document

    :type config: dict
    :type dirname: str
    :type pyfile: str
    """

    template = Template(module_template)
    fragments = {}

    fragments['title'] = make_title(pyfile)
    fragments['module'] = "{}.{}".format(dirname.replace('/', '.'), pyfile)
    fragments['date'] = "{:%d-%m-%y %H:%M:%S}".format(datetime.now())

    documentation = template.substitute(**fragments)

    rst_name = pyfile + ".rst"
    rst_file = path.join(config['api_dir'], dirname, rst_name)

    with open(rst_file, 'w') as f:
        f.write(documentation)

    print("\t\t{}.".format(fragments['module'].split('.')[-1]))


def process_dir(config, dirname, subdirs, files):
    """ Given a source folder write the apidocs for the files it contains.
    
    :param config: Config that contains all the relevant filepath info.
    :param dirname: Path of the current directory relative to the root.
    :param subdirs: Names of the subdirectories, only needed to write the index
    :param files: List of the filenames inside
    
    :type config: dict
    :type dirname: str
    :type subdirs: list
    :type files: list
    """

    # Check to see if the folder exists in the docs
    module_dir = path.join(config['api_dir'], dirname)

    if not path.exists(module_dir):
        mkdir(module_dir)

    # Select .py files but not __init__.py
    file_filter = lambda f: f.endswith(".py") and not f.startswith("__")
    py_files = [f.split('.')[0] for f in files if file_filter(f)]

    # Select submodules, but not __pycache__
    py_dirs = [d + '/index' for d in subdirs if d != "__pycache__"]

    # Write the index
    template = Template(index_template)
    fragments = {}
    fragments['title'] = make_title(dirname.split("/")[-1])
    fragments['date'] = "{:%d-%m-%y %H:%M:%S}".format(datetime.now())

    items = py_files + py_dirs
    fragments['items'] = "    " + "    ".join("{}\n".format(py) for py in sorted(items))

    index_rst = path.join(config['api_dir'], dirname, 'index.rst')

    with open(index_rst, 'w') as f:
        f.write(template.substitute(**fragments))

    prefix = "/".join(dirname.split("/")[:-1]) + '/'
    print("\t{}.".format(dirname.replace(prefix, " "*len(prefix))))

    # Write the module documentation
    for py in py_files:
        document_module(config, dirname, py)


def main():

    config = {}

    if len(sys.argv) > 1:
        config['root'] = sys.argv[1]
    else:
        config['root'] = getcwd()

    config['src_dir'] = path.join(config['root'], "topos")
    config['doc_dir'] = path.join(config['root'], "docs")
    config['api_dir'] = path.join(config['doc_dir'], "contribute", "reference")

    print("Writing reference documentation...")

    for dir in walk(config['src_dir']):

        dirname, subdirs, files = dir
        dirname = dirname.replace(config['root'] + '/', "")

        # Skip the pycache directory
        if "__pycache__" in dirname:
            continue

        process_dir(config, dirname, subdirs, files)


if __name__ == "__main__":
    main()
